(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{465:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-java-中有那些数据类型-他们的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-中有那些数据类型-他们的区别"}},[s._v("#")]),s._v(" 1.java 中有那些数据类型？他们的区别？")]),s._v(" "),t("p",[s._v("有八种数据类型，分别是 undefined，null，boolean，number，string，object，symbol，Bigint")]),s._v(" "),t("p",[s._v("symbol 代表独一无二且不可变的数据类型，Bigint 可以安全的存储和操作大整数。")]),s._v(" "),t("p",[s._v("基本数据类型存储在栈中，先进后出")]),s._v(" "),t("p",[s._v("引用数据类型存储在堆中，堆是一个优先队列，是按照优先级排序的，优先级可以按照大小来规定。")]),s._v(" "),t("h2",{attrs:{id:"_2-数据类型检测的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型检测的方式"}},[s._v("#")]),s._v(" 2.数据类型检测的方式？")]),s._v(" "),t("p",[t("strong",[s._v("typeof")]),s._v(" ，数组，对象，null 都会被判定为 object。")]),s._v(" "),t("p",[t("strong",[s._v("instanceof")]),s._v(" ，可以正确判断对象的类型，其机制是判断在原型链中能否找到该类型的原型。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("constructor")]),s._v(" ,有两个作用 ， 一是判断数据的类型，二是对象实例通过 constructor 访问它的构造函数。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Object.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("toString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"_3-判断数组的方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-判断数组的方法有哪些"}},[s._v("#")]),s._v(" 3.判断数组的方法有哪些?")]),s._v(" "),t("p",[s._v("1.Object.prototype.toString.call()")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Array"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("2.通过原型链做判断")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("3.通过 Array.isArray 判断")]),s._v(" "),t("p",[s._v("4.通过 instanceof 判断 obj instanceof Array")]),s._v(" "),t("p",[s._v("5.通过 Array.prototype.isPrototypeOf(obj)")]),s._v(" "),t("h2",{attrs:{id:"_4-null-和-undefined-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-null-和-undefined-的区别"}},[s._v("#")]),s._v(" 4.null 和 undefined 的区别？")]),s._v(" "),t("p",[s._v("undefined 代表的是含义是未定义，null 代表的含义是空对象。")]),s._v(" "),t("p",[s._v("变量声明未定义会返回 undefined，null 主要用于赋值给一些可能会返回对象的变量，作为初始化。")]),s._v(" "),t("p",[s._v("undefined 不是保留字，可以用来当做变量名，这会影响对 undefined 值的判断。可以使用 void 0 来获得安全的 undefined")]),s._v(" "),t("h2",{attrs:{id:"_5-typeof-null-的结果是什么-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-typeof-null-的结果是什么-为什么"}},[s._v("#")]),s._v(" 5.typeof null 的结果是什么？为什么？")]),s._v(" "),t("p",[s._v("结果是 Object ，null 的类型标签是 000，和 object 一样。")]),s._v(" "),t("h2",{attrs:{id:"_6-为什么-0-1-0-2-不等于-0-3-如何让其相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-为什么-0-1-0-2-不等于-0-3-如何让其相等"}},[s._v("#")]),s._v(" 6.为什么 0.1+0.2 不等于 0.3，如何让其相等？")]),s._v(" "),t("p",[s._v("0.1 和 0.2 转换为二进制都是无限循环的数，所以 0.1+0.2 其实是等于 0.30000000000000004。")]),s._v(" "),t("p",[s._v("解决办法:设置一个误差范围，这个值通常为 2 的负 52 次方，在 Es6 中提供了 Number.EPSILON 属性，它")]),s._v(" "),t("p",[s._v("的值就是 2 的-52 次方，所以我们只需要判断 0.1+0.2-0.3 是否小于 Number.EPSILON，如果小于，就返")]),s._v(" "),t("p",[s._v("回 true")]),s._v(" "),t("h2",{attrs:{id:"_7-typeofnan-的结果是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-typeofnan-的结果是什么"}},[s._v("#")]),s._v(" 7.typeofNaN 的结果是什么？")]),s._v(" "),t("p",[s._v("Number NaN 不是一个数字， NaN 与自身不相等。NaN！==NaN 为 true")]),s._v(" "),t("h2",{attrs:{id:"_8-isnan-和-number-isnan-函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-isnan-和-number-isnan-函数的区别"}},[s._v("#")]),s._v(" 8.isNaN 和 Number.isNaN 函数的区别？")]),s._v(" "),t("p",[s._v("isNaN 接受参数后，任何不能转为数字的值都会返回为 true，因此非数值传入也会返回 true")]),s._v(" "),t("p",[s._v("Number.isNaN 会先判断参数是否为数字，如果是数字在判断是否为 NaN，不会进行数据类型的转换，")]),s._v(" "),t("p",[s._v("这样的判断更加精准。")]),s._v(" "),t("h2",{attrs:{id:"_9-和-操作符的返回值。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-和-操作符的返回值。"}},[s._v("#")]),s._v(" 9.||和&&操作符的返回值。")]),s._v(" "),t("p",[s._v("对于||来说，如果条件判断为 true，就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。")]),s._v(" "),t("p",[s._v("对于&&来说，如果条件判断为 true，就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。")]),s._v(" "),t("p",[s._v("||和&&返回它们其中一个操作数的值，而不是条件判断的结果")]),s._v(" "),t("h2",{attrs:{id:"_10-如何判断一个对象是空对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何判断一个对象是空对象"}},[s._v("#")]),s._v(" 10.如何判断一个对象是空对象？")]),s._v(" "),t("p",[s._v("使用 JSON 自带的 stringify 方法来进行判断。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stringify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"空对象"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("使用 Es6 新增的方法 Object.keys()来判断。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keys")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"空对象"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_11-如果-new-一个箭头函数会怎么样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-如果-new-一个箭头函数会怎么样"}},[s._v("#")]),s._v(" 11.如果 new 一个箭头函数会怎么样？")]),s._v(" "),t("p",[s._v("箭头函数是 ES6 中的提出来的，它没有 prototype，也没有自己的 this 指向，更不可以使用 arguments 参")]),s._v(" "),t("p",[s._v("数，所以不能 n")]),s._v(" "),t("p",[s._v("ew—个箭头函数。")]),s._v(" "),t("p",[s._v("new 操作符的实现步骤如下:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("创建 ─ 个对象")])]),s._v(" "),t("li",[t("p",[s._v("将构造函数的作用域赋给新对象（也就是将对象的"),t("em",[s._v("proto")]),s._v("属性指向构造函数的 prototype 属性)")])]),s._v(" "),t("li",[t("p",[s._v("让函数的 this 指向这个对象，执行构造函数的代码。")])]),s._v(" "),t("li",[t("p",[s._v("返回新的对象")])])]),s._v(" "),t("h2",{attrs:{id:"_12-map-和-object-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-map-和-object-的区别"}},[s._v("#")]),s._v(" 12.map 和 object 的区别?")]),s._v(" "),t("p",[t("strong",[s._v("map")]),s._v(":")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("默认情况下不包含任何键，只包含显示插入的键。")])]),s._v(" "),t("li",[t("p",[s._v("map 的键可以是任意值，包括函数，对象或者任意基本类型。")])]),s._v(" "),t("li",[t("p",[s._v("map 的 key 是有序的。")])]),s._v(" "),t("li",[t("p",[s._v("map 的键值对个数可以通过 size 属性获取")])]),s._v(" "),t("li",[t("p",[s._v("map 可以直接被迭代。")])]),s._v(" "),t("li",[t("p",[s._v("在频繁增删键值对的情况下性能更好。")])])]),s._v(" "),t("p",[t("strong",[s._v("object")]),s._v("：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("object 有一个原型，原型链上面的键名可能和自己设置的键名冲突。")])]),s._v(" "),t("li",[t("p",[s._v("object 的键名必须是 string 或者 Symbol")])]),s._v(" "),t("li",[t("p",[s._v("object 的键是无序的")])]),s._v(" "),t("li",[t("p",[s._v("object 的键值对个数需要手动计算")])]),s._v(" "),t("li",[t("p",[s._v("object 需要获取键值之后才能迭代。")])]),s._v(" "),t("li",[t("p",[s._v("频繁增删键值对的情况下没有优化。")])])]),s._v(" "),t("h2",{attrs:{id:"_13-map-和-weakmap-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-map-和-weakmap-的区别"}},[s._v("#")]),s._v(" 13.map 和 weakMap 的区别?")]),s._v(" "),t("p",[t("strong",[s._v("map")]),s._v("：")]),s._v(" "),t("p",[s._v("本质上是键值对的集合，但是键名不限制类型，可以是任意类型。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("get 方法，读取 key 对应的键值，如果找不到 key，返回 undefined。")])]),s._v(" "),t("li",[t("p",[s._v("set 方法，设置键名对应的键值，返回 map 结构，如果 key 已经有值，则更新，否则就会生成一个新的键值对。")])]),s._v(" "),t("li",[t("p",[s._v("has 方法，判断是否包含某个键名，返回布尔值。")])]),s._v(" "),t("li",[t("p",[s._v("delete 方法，删除某个键，成功返回 true，失败返回 false")])]),s._v(" "),t("li",[t("p",[s._v("clear 方法，清空所有成员")])])]),s._v(" "),t("p",[t("strong",[s._v("weakmap")]),s._v(":")]),s._v(" "),t("p",[s._v("键名必须是对象，没有"),t("code",[s._v("clear")]),s._v("方法。weakMap 键名所指的对象不计入垃圾回收机制。")]),s._v(" "),t("h3",{attrs:{id:"_14-对于-json-的理解。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-对于-json-的理解。"}},[s._v("#")]),s._v(" 14.对于 json 的理解。")]),s._v(" "),t("p",[s._v("JSON 是一种轻量级数据交换格式，可以被任何变成语言读取作为数据格式来传递。")]),s._v(" "),t("p",[s._v("在 js 中提供了两个函数来实现 JSON 数据格式的转换。")]),s._v(" "),t("p",[t("code",[s._v("JSON.stringify")]),s._v("() 传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 格式的字符串。")]),s._v(" "),t("p",[t("code",[s._v("JSON.parse()")]),s._v("将 JSON 格式的字符串转为转换为 js 的数据结构。")]),s._v(" "),t("h2",{attrs:{id:"_15-javascript-脚本延迟加载的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-javascript-脚本延迟加载的方式有哪些"}},[s._v("#")]),s._v(" 15.javascript 脚本延迟加载的方式有哪些？")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("defer 属性，使 js 与页面并行加载，在页面加载完毕后再执行。")])]),s._v(" "),t("li",[t("p",[s._v("async 属性，给 js 添加 async 属性，使 js 脚本异步加载，加载完毕后立即执行。但是如果在 js 脚本加载完毕时，页面还没有加载完成,这时会阻塞页面的加载。")])]),s._v(" "),t("li",[t("p",[s._v("动态创建 dom 的方式来加载脚本，监听文档的加载事件，在文档加载完毕后，动态创建 srcipt 标签来引入 js 脚本。")])]),s._v(" "),t("li",[t("p",[s._v("将 js 脚本放在文档的最底部。")])])]),s._v(" "),t("h2",{attrs:{id:"_16-类数组对象的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-类数组对象的定义"}},[s._v("#")]),s._v(" 16.类数组对象的定义")]),s._v(" "),t("p",[s._v("拥有 length 属性和若干索引属性的对象，与数组类似，但是不调用数组的方法。")]),s._v(" "),t("p",[t("strong",[s._v("类数组转数组的方法:")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Array.prototype.slice.call(arrayLike)")])]),s._v(" "),t("li",[t("p",[s._v("Array.prototype.splice.call(arrayLike,0)")])]),s._v(" "),t("li",[t("p",[s._v("Array.prototype.concat.apply([],arrayLike) 传入空数组作为 this 指向")])]),s._v(" "),t("li",[t("p",[s._v("Array.from(arrayLike)")])])]),s._v(" "),t("h2",{attrs:{id:"_17-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[s._v("#")]),s._v(" 17.为什么函数的 arguments 参数是类数组而不是数组? 如何遍历类数组?")]),s._v(" "),t("p",[s._v("arguments 是一个对象，拥有 callee 和"),t("code",[s._v("length")]),s._v("属性，但是不能使用数组的方法。")]),s._v(" "),t("p",[s._v("可以将"),t("code",[s._v("arguments")]),s._v("转换为数组后再进行遍历。")]),s._v(" "),t("h2",{attrs:{id:"_18-什么是-bom-和-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是-bom-和-dom"}},[s._v("#")]),s._v(" 18.什么是 BOM 和 DOM？")]),s._v(" "),t("p",[s._v("DOM 指的是文档对象模型，它指的是将文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。")]),s._v(" "),t("p",[s._v("BOM 指的是浏览器对象模型。它指的是将浏览器作为一个对象，这个对象主要定义了与浏览器进行交互的方法和接口。")]),s._v(" "),t("p",[s._v("BOM 的核心是 window，window 不仅是一个用来访问浏览器窗口的一个接口，又是一个全局的对象。")]),s._v(" "),t("p",[s._v("这意味着在网页中定义的任何对象，变量和函数，都将作为全局对象的一个属性或者方法存在。")]),s._v(" "),t("h2",{attrs:{id:"_19-对-ajax-的理解-实现一个-ajax-的请求。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-对-ajax-的理解-实现一个-ajax-的请求。"}},[s._v("#")]),s._v(" 19.对 AJAX 的理解，实现一个 AJAX 的请求。")]),s._v(" "),t("p",[s._v("ajax 指的是通过 js 的异步通信，从服务器获取 xml 文档，从中提取数据，再更新网页的当前部分，不用刷新整个网页")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("callback"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//先创建一个ajax对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ajax "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("XMLHttpRequest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建http请求")]),s._v("\n    ajax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送请求")]),s._v("\n    ajax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置状态监听函数")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n        0:未初始化 请求已创建，但尚未调用 open() 方法。\n        1:正在加载 open() 方法已调用，但尚未调用 send() 方法。\n        2:加载完成 send() 方法已调用，并收到了响应头信息。\n        3:正在交互 响应体中的部分数据可用，但响应未完成。\n        4:完成 响应已完成，且数据已经接收完毕。\n     */")]),s._v("\n    ajax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("onreadystatechange")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ajax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("readyState "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ajax"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("responseText"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("callback")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h2",{attrs:{id:"_20-javascript-为什么要进行变量提升-它导致了什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-javascript-为什么要进行变量提升-它导致了什么问题"}},[s._v("#")]),s._v(" 20.JavaScript 为什么要进行变量提升，它导致了什么问题?")]),s._v(" "),t("p",[s._v("变量提升就是将无论在什么地方声明的变量都提升到作用域的顶部，可以在声明前访问。")]),s._v(" "),t("p",[s._v("优点：解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间")]),s._v(" "),t("p",[s._v("声明提升还可以提高 JS 代码的容错性，使一些不规范的代码也可以正常执行")]),s._v(" "),t("h2",{attrs:{id:"_21-es6-模块与-commonjs-模块有什么异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-es6-模块与-commonjs-模块有什么异同"}},[s._v("#")]),s._v(" 21.ES6 模块与 CommonJS 模块有什么异同?")]),s._v(" "),t("ol",[t("li",[s._v("语法差异")])]),s._v(" "),t("p",[s._v("ES6 模块使用 import 关键字导入模块，使用 export 关键字导出模块或模块中的特定内容。")]),s._v(" "),t("p",[s._v("CommonJS 模块使用 require() 函数导入模块，使用 module.export 或 export 对象导出模块或模块中的")]),s._v(" "),t("p",[s._v("特定内容")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("加载时机差异")])]),s._v(" "),t("p",[s._v("ES6 模块在编译时静态解析，可以在代码执行之前进行模块加载。")]),s._v(" "),t("p",[s._v("CommonJS 模块在运行时动态加载，模块加载发生在代码执行阶段。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("导出方式的差异")])]),s._v(" "),t("p",[s._v("ES6 模块可以导出多个值，并且支持导出默认值和命名导出。")]),s._v(" "),t("p",[s._v("CommonJS 模块只能导出一个默认值。")]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("导入方式的差异")])]),s._v(" "),t("p",[s._v("ES6 模块的导入是静态的，CommonJS 模块的导入是动态的")]),s._v(" "),t("h2",{attrs:{id:"_22-use-strict-是什么意思-使用它区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-use-strict-是什么意思-使用它区别是什么"}},[s._v("#")]),s._v(" 22.use strict 是什么意思 ? 使用它区别是什么?")]),s._v(" "),t("p",[s._v("开启严格模式。")]),s._v(" "),t("p",[s._v("目的：提高效率，增加编译速度。减少 js 的不合理之处，不严谨之处，减少怪异行为。保证代码的运行安全")]),s._v(" "),t("p",[s._v("区别:禁止使用 with 语句。禁止 this 指向全局对象。对象不能有重名的属性")]),s._v(" "),t("h2",{attrs:{id:"_23-如何判断一个对象是否属于某个类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何判断一个对象是否属于某个类"}},[s._v("#")]),s._v(" 23.如何判断一个对象是否属于某个类?")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型中的任何位置")])]),s._v(" "),t("li",[t("p",[s._v("通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是对象的 constructor 可以被改写。")])]),s._v(" "),t("li",[t("p",[s._v("Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断")])])]),s._v(" "),t("h2",{attrs:{id:"_24-ajax、axios、fetch-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-ajax、axios、fetch-的区别"}},[s._v("#")]),s._v(" 24.ajax、axios、fetch 的区别")]),s._v(" "),t("p",[t("strong",[s._v("ajax")]),s._v("实现了网页的局部更新。但是是基于 mvc 实现的，不符合 mvvm 的浪潮，且有回调地狱问题。")]),s._v(" "),t("p",[t("strong",[s._v("Fetch")]),s._v("是基于 promise 设计的，不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象。")]),s._v(" "),t("p",[s._v("优点:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("语法简洁，更加语义化。")])]),s._v(" "),t("li",[t("p",[s._v("支持 async/await")])]),s._v(" "),t("li",[t("p",[s._v("api 更加丰富")])])]),s._v(" "),t("p",[s._v("缺点:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("只对网络请求报错，对 400,500 都当做成功的请求。")])]),s._v(" "),t("li",[t("p",[s._v("默认不携带 coolie。")])])]),s._v(" "),t("p",[t("strong",[s._v("Axios")]),s._v("是基于 promise 封装的 http 客户端。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("可以在多平台运行，支持 promiseAPI")])]),s._v(" "),t("li",[t("p",[s._v("监听请求和返回，")])]),s._v(" "),t("li",[t("p",[s._v("自动转换 json 数据。")])]),s._v(" "),t("li",[t("p",[s._v("客户端抵御 XSRF 攻击。")])])]),s._v(" "),t("h2",{attrs:{id:"_25-对于原型和原型链的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-对于原型和原型链的理解"}},[s._v("#")]),s._v(" 25.对于原型和原型链的理解")]),s._v(" "),t("p",[s._v("在 JavaScript 中，每个对象都有一个特殊的属性称为原型（prototype）。"),t("strong",[s._v("原型")]),s._v("是一个对象，它包含共享属性和方法的定义。当我们访问对象上的属性或方法时，如果该对象本身没有该属性或方法，JavaScript 引擎会尝试在原型链中查找。")]),s._v(" "),t("p",[t("strong",[s._v("原型链")]),s._v("是一种链式结构，由对象的原型组成。每个对象都有一个隐式指向其原型的链接，通过 "),t("strong",[s._v("proto")]),s._v(" 属性（ES6 之前）或 Object.getPrototypeOf(obj) 方法（ES6+）可以访问。当我们访问一个对象的属性时，JavaScript 首先在对象本身查找该属性。如果没有找到，则会继续在对象的原型上查找。如果原型也没有该属性，JavaScript 会继续在原型的原型上查找，以此类推，直到找到该属性或到达原型链的末尾（即对象的原型为 null）。")]),s._v(" "),t("h3",{attrs:{id:"_26-如何获得对象非原型链上的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何获得对象非原型链上的属性"}},[s._v("#")]),s._v(" 26.如何获得对象非原型链上的属性？")]),s._v(" "),t("p",[s._v("使用 hasOwnProperty()方法来判断属性是否属于原型链的属性。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasOwnProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"_27-对闭包的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-对闭包的理解"}},[s._v("#")]),s._v(" 27.对闭包的理解")]),s._v(" "),t("p",[s._v("闭包指的是有权限访问另一个函数作用域中变量的函数，创建闭包最常见的方式就是在函数内部创建另一个函数，创建的函数可以访问到当前函数的局部变量")]),s._v(" "),t("p",[t("strong",[s._v("常用用途:")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。")])]),s._v(" "),t("li",[t("p",[s._v("保存已经运行结束的函数上下文中的变量。")])])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*如果用var声明变量\n 由于变量 i 的作用域是整个函数，setTimeout 中的闭包捕获的是相同的 i 变量，而不是循环中每次迭代时创建的新变量。\n 因此，当 setTimeout 执行时，i 已经是循环结束后的值 6，因此会打印 6 五次。\n 而 let 会创建块级作用域，每次迭代都会创建一个新的变量。\n 这样，每个 setTimeout 中的闭包都会捕获不同的 i 的值，从而实现按预期输出 1 到 5。\n 如果不修改var 为let 那么可以写自执行函数传参*/")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("j")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n             console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h2",{attrs:{id:"_28-对作用域和作用域链的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-对作用域和作用域链的理解"}},[s._v("#")]),s._v(" 28.对作用域和作用域链的理解")]),s._v(" "),t("p",[t("strong",[s._v("全局作用域")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("最外层函数和最外层函数外面定义的变量拥有全局作用域")])]),s._v(" "),t("li",[t("p",[s._v("所有未定义直接赋值的变量自动声明为全局作用域")])]),s._v(" "),t("li",[t("p",[s._v("所有 window 属性的对象自动拥有全局作用域")])]),s._v(" "),t("li",[t("p",[s._v("过多的全局作用域变量会污染命名空间，容易引起命名冲突。")])])]),s._v(" "),t("p",[t("strong",[s._v("函数作用域")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("声明在函数作用域内的变量")])]),s._v(" "),t("li",[t("p",[s._v("作用域是分层的，内层作用域可以访问到外层作用域")])])]),s._v(" "),t("p",[t("strong",[s._v("块级作用域")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("let 和 const 可以创建块级作用域 ，也可以用{}创建")])]),s._v(" "),t("li",[t("p",[s._v("let 和 const 声明的变量不會有变量提升，也不可以重复声明。")])]),s._v(" "),t("li",[t("p",[s._v("在循环内部比较适合绑定块级作用域，这样可以将声明的计数器变量限制在循环内部。")])])]),s._v(" "),t("p",[t("strong",[s._v("作用域链")])]),s._v(" "),t("p",[s._v("在当前作用域中查找所需变量，但是该作用域没有这个变量，如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到 window 对象就被终止，这一层层的关系就是作用域链。通过作用域链，可以访问到外层环境的变量和函数。")]),s._v(" "),t("h2",{attrs:{id:"_29-对执行上下文的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-对执行上下文的理解"}},[s._v("#")]),s._v(" 29.对执行上下文的理解？")]),s._v(" "),t("p",[s._v("执行上下文类型")]),s._v(" "),t("p",[t("strong",[s._v("全局执行上下文")]),s._v(":任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并设置 this 值为全局对象。")]),s._v(" "),t("p",[t("strong",[s._v("函数执行上下文")]),s._v(":当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。")]),s._v(" "),t("p",[s._v("执行上下文栈")]),s._v(" "),t("p",[s._v("js 使用全局上下文栈进行来管理上下文，每当遇到一个函数调用，就创建一个新的执行上下文压入栈顶，js 会执行位于栈顶的函数，当函数执行完成之后，上下文会从栈中弹出，继续执行下一个上下文。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("first")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("second")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("second")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("first")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1 3 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//先执行first 然后遇到second 创建一个新的上下文并执行 当second执行完毕后继续执行first")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//变量先赋值为undefined，函数先声明好可使用。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这一步执行完了，才开始正式的执行程序")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"_30-this-call-apply-bind-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-this-call-apply-bind-的理解"}},[s._v("#")]),s._v(" 30.this/call/apply/bind 的理解？")]),s._v(" "),t("p",[t("strong",[s._v("对 this 对象的理解")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在函数中直接调用指向 window")])]),s._v(" "),t("li",[t("p",[s._v("在定时器延时器中直接调用也指向 window")])]),s._v(" "),t("li",[t("p",[s._v("在对象方法中调用指向调用该方法的对象")])]),s._v(" "),t("li",[t("p",[s._v("在构造函数中调用指向通过该构造函数实例化出来的对象。")])])]),s._v(" "),t("p",[t("strong",[s._v("call/apply/bind")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("apply 接受两个参数 ，一个是新的 this 指向，一个是参数组成的数组")])]),s._v(" "),t("li",[t("p",[s._v("call 接受的第一个参数为新的 this 指向，剩下的为剩余参数。")])]),s._v(" "),t("li",[t("p",[s._v("bind 第一个参数为新的 this 指向，后面的参数依次传入，不会立即执行。")])])]),s._v(" "),t("h2",{attrs:{id:"_31-异步编程的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-异步编程的实现方式"}},[s._v("#")]),s._v(" 31.异步编程的实现方式")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("回调函数。多个回调函数嵌套时会造成回调地狱问题。不利于代码维护。")])]),s._v(" "),t("li",[t("p",[s._v("Promise。可以进行链式调用，但是链式调用过多也会造成代码阅读性问题。")])]),s._v(" "),t("li",[t("p",[s._v("generator。 在函数执行过程中将执行权转移出去，当函数执行完毕再将执行权转移回来，因此需要有一个自动执行 generator 的机制。")])]),s._v(" "),t("li",[t("p",[s._v("async/await 。Promise 的语法糖，可以将异步代码当做同步代码来书写。")])])]),s._v(" "),t("h2",{attrs:{id:"_32-对-promise-的理解。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-对-promise-的理解。"}},[s._v("#")]),s._v(" 32.对 Promise 的理解。")]),s._v(" "),t("p",[s._v("Promise 本身是同步的立即执行函数。")]),s._v(" "),t("p",[s._v("Promise 的实例有三种状态:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Pending(进行中)")])]),s._v(" "),t("li",[t("p",[s._v("resolved(已完成)")])]),s._v(" "),t("li",[t("p",[s._v("rejected(已拒绝)")])])]),s._v(" "),t("p",[s._v("一旦状态改变，就无法在改变。")]),s._v(" "),t("p",[s._v("缺点:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("无法取消 Promise，一旦新建就会立即执行，无法中途取消。")])]),s._v(" "),t("li",[t("p",[s._v("不设置回调函数无法抛出错误")])]),s._v(" "),t("li",[t("p",[s._v("当处于 pending 状态时，无法判断目前进展到哪一个阶段。")])])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建promise的方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"异步操作成功"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("常用方法: all() , race(),then(),catch(), finally() 不管结果如何都会执行的函数。")]),s._v(" "),t("h2",{attrs:{id:"_33-async-await-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-async-await-的理解"}},[s._v("#")]),s._v(" 33.async/await 的理解")]),s._v(" "),t("p",[s._v("async/await 是 generator 的语法糖，async 用来声明异步函数，await 用来等待结果。async 函数返回一个 promise，所以在最外层不能 y 用 await 获取返回值时，应该用.then 来处理。await"),t("strong",[s._v("等待")]),s._v("的是一个 promise 的结果")]),s._v(" "),t("p",[s._v("async/await 对比 Promise 的优势。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("代码阅读起来更加同步。")])]),s._v(" "),t("li",[t("p",[s._v("Promise 传递中间值非常麻烦，async/await 几乎是同步的写法。")])]),s._v(" "),t("li",[t("p",[s._v("错误处理友好，可以使用 try/catch 语法")])]),s._v(" "),t("li",[t("p",[s._v("调试友好")])])]),s._v(" "),t("h2",{attrs:{id:"_34-对象创建的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-对象创建的方式有哪些"}},[s._v("#")]),s._v(" 34.对象创建的方式有哪些？")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("工厂模式，用函数封装创建对象的细节，通过调用函数来达到复用的目的。")])]),s._v(" "),t("li",[t("p",[s._v("构造函数模式，执行构造函数会先创建一个新的对象，然后将对象的原型指向构造函数的 prototype，然后将执行上下文中的 this 指向这个对象，最后在执行整个函数，如果返回值不是对象，则返回新建的对象。")])]),s._v(" "),t("li",[t("p",[s._v("原型模式，每一个函数都有一个 prototype 属性，这个属性是一个对象，通过构造函数创建的所有实例都能够共享里面的属性和方法，因此可以使用原型对象来添加公用属性和方法来实现代码的复用。")])]),s._v(" "),t("li",[t("p",[s._v("构造函数加原型模式。通过构造函数来初始化对象属性，通过原型对象来实现函数方法的复用。")])])]),s._v(" "),t("h2",{attrs:{id:"_35-对象继承的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-对象继承的方式有哪些"}},[s._v("#")]),s._v(" 35.对象继承的方式有哪些？")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("原型链继承：缺点，在包含引用的数据类型时，会被所有的实例对象所共享。容易造成修改的混乱，还有就是在创建子类型时不能向超类型传递参数。")])]),s._v(" "),t("li",[t("p",[s._v("借用构造函数继承：缺点无法实现函数方法的复用。")])]),s._v(" "),t("li",[t("p",[s._v("组合继承")])]),s._v(" "),t("li",[t("p",[s._v("原型式继承")])]),s._v(" "),t("li",[t("p",[s._v("寄生式继承")])]),s._v(" "),t("li",[t("p",[s._v("寄生式组合继承")])])]),s._v(" "),t("h2",{attrs:{id:"_36-浏览器的垃圾回收机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-浏览器的垃圾回收机制"}},[s._v("#")]),s._v(" 36.浏览器的垃圾回收机制")]),s._v(" "),t("p",[s._v("概念:js 代码运行时，需要分配内存空间来存储变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。")]),s._v(" "),t("p",[t("strong",[s._v("回收机制:")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("全局变量的生命周期会持续到页面卸载。")])]),s._v(" "),t("li",[t("p",[s._v("局部变量在函数执行结束后就会被释放，闭包情况下，变量不会被自动回收。")])])]),s._v(" "),t("p",[t("strong",[s._v("回收的方式:")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v('标记清除法：当变量进入执行环境时，就标记这个变量"进入环境"，被标记为进入环境的变量是不能被回收的，因为他们正在被使用，当变量离开环境时，会被标记为离开环境，被标记为离开环境的变量会被清除，回收内存。')])]),s._v(" "),t("li",[t("p",[s._v("引用计数法:当声明了一个变量并将引用类型赋值给该变量时，这个值的引用计数就是 1，如果包含这个值引用的变量又取得了另外一个值，引用次数就减一，当引用计数变为 0 时，这个变量占用的内存空间就会被释放出来。")])])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    obj1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// obj1引用obj2")]),s._v("\n    obj2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// obj2引用obj1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这种情况下 ，就需要手动释放内存")]),s._v("\nobj1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nobj2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("减少垃圾回收:")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("当代码比较复杂时，垃圾回收带来的代价比较大，所以应该尽量 j 减少垃圾回收。")])]),s._v(" "),t("li",[t("p",[s._v("对数组进行优化: 清空数组时，赋值为【】会创建一个新的空对象数组，可以设置 length 为 0 来清空数组。")])]),s._v(" "),t("li",[t("p",[s._v("对对象进行优化：尽量复用对象，如果对象不在使用，就将其设置为 null")])]),s._v(" "),t("li",[t("p",[s._v("对函数进行优化:函数中的循环表达式，如果可以服用，尽量放在函数的外面。")])])]),s._v(" "),t("h2",{attrs:{id:"_37-哪些情况会导致内存的泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-哪些情况会导致内存的泄露"}},[s._v("#")]),s._v(" 37.哪些情况会导致内存的泄露？")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("意外的全局变量:使用了未声明的全局变量，从而创建了一个全局变量，该变量一直存在在内存中，无法被回收。")])]),s._v(" "),t("li",[t("p",[s._v("未清除的计时器和延时器")])]),s._v(" "),t("li",[t("p",[s._v("脱离 dom 的引用:获取了一个 dom 的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。")])]),s._v(" "),t("li",[t("p",[s._v("闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);