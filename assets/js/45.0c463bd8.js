(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{461:function(t,a,s){"use strict";s.r(a);var e=s(2),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"ssh-key-及-配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-key-及-配置信息"}},[t._v("#")]),t._v(" ssh key 及 配置信息")]),t._v(" "),a("p",[t._v("设置 "),a("code",[t._v("Git")]),t._v(" 的 "),a("code",[t._v("user name")]),t._v(" 和 "),a("code",[t._v("email")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("$ git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vkuyxu"')]),t._v("\n$ git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vkuyxu@163.com"')]),t._v("\n$ git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st status "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//配置命令简写")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("生成 SSH 密钥过程：")])]),t._v(" "),a("ol",[a("li",[t._v("查看是否已经有了 "),a("code",[t._v("ssh")]),t._v(" 密钥："),a("code",[t._v("cd ~/.ssh")]),t._v(" ;如果没有密钥则不会有此文件夹，有则备份删除")]),t._v(" "),a("li",[t._v("生存密钥："),a("code",[t._v('$ ssh-keygen -t rsa -C "vkuyxu@163.com"')]),t._v("按 3 个回车，密码为空.在 github 上添加 ssh 密钥，这要添加的是"),a("code",[t._v("“id_rsa.pub”")]),t._v("里面的公钥")])]),t._v(" "),a("h2",{attrs:{id:"本地初始化一个目录为代码仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地初始化一个目录为代码仓库"}},[t._v("#")]),t._v(" 本地初始化一个目录为代码仓库")]),t._v(" "),a("p",[a("strong",[t._v("git init 初始化仓库")])]),t._v(" "),a("ol",[a("li",[t._v("创建一个新目录作为代码仓库")]),t._v(" "),a("li",[t._v("执行 "),a("code",[t._v("git init")]),t._v("； 执行之后会发现多了一个"),a("code",[t._v(".git")]),t._v(" 目录这就说明仓库已经初始完成")]),t._v(" "),a("li",[a("code",[t._v("git remote add origin git@gitee.com:wlg1610d/1610d.git")])]),t._v(" "),a("li",[a("code",[t._v("git pull -u origin master")])]),t._v(" "),a("li",[t._v("正常提交代码即可。")])]),t._v(" "),a("h2",{attrs:{id:"克隆一个项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆一个项目"}},[t._v("#")]),t._v(" 克隆一个项目")]),t._v(" "),a("p",[a("code",[t._v("https")]),t._v(" 速度慢、需要输入账号和密码/ ssh 会被公司限制 两种协议")]),t._v(" "),a("p",[t._v("要克隆一个仓库，首先必须知道仓库的地址，后使用 "),a("code",[t._v("git clone")]),t._v(" 命令克隆然。")]),t._v(" "),a("p",[a("code",[t._v("git clone git@github.com:michaelliao/gitskills.git")])]),t._v(" "),a("p",[a("code",[t._v("Git")]),t._v(" 支持多种协议，包括 "),a("code",[t._v("https")]),t._v("，但通过 "),a("code",[t._v("ssh")]),t._v(" 支持的原生 "),a("code",[t._v("git")]),t._v(" 协议速度最快。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git clone https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("wlg1610d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("1610d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//or")]),t._v("\ngit clone git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("wlg1610d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("1610d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("通常推荐大家直接 "),a("code",[t._v("git clone")]),t._v(" 一个项目的方式来创建本地的代码仓库！")]),t._v(" "),a("p",[t._v("演示一下在 "),a("code",[t._v("github")]),t._v(" 上如何创建一个代码仓库！！！")]),t._v(" "),a("h2",{attrs:{id:"创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),a("p",[t._v("Git 鼓励大量使用分支：\n创建分支：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" （默认当前所在分支为基础分支，可以指定其它分支）\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("切换分支：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("创建+切换分支：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基础分支名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("（origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master）\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("提交刚创建的分支：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git push origin branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建远程分支")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("更新分支：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Git pull origin branchname or Git fetch origin branchname git merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff 目标分支\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch1 分支名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("（把分支 branch1 合并到当前分支上）\ngit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast forward and "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("通常，合并分支时，如果可能，"),a("code",[t._v("Git")]),t._v(" 会用 "),a("code",[t._v("Fast forward")]),t._v(" 模式，但这种模式下，删除分支后，会丢掉分支信息。\n"),a("code",[t._v("git rebase")]),t._v(" 合并后会清除工作分支，而 merge 不会\n如果要强制禁用 "),a("code",[t._v("Fast forward")]),t._v(" 模式，"),a("code",[t._v("Git")]),t._v(" 就会在 "),a("code",[t._v("merge")]),t._v(" 时生成一个新的 "),a("code",[t._v("commit")]),t._v("，这样，从分支历史上就可以看出分支信息\n请注意"),a("code",[t._v("--no-ff")]),t._v(" 参数，表示禁用 "),a("code",[t._v("Fast forward")]),t._v(" 请注意"),a("code",[t._v("--no-ff")]),t._v(" 参数，表示禁用 "),a("code",[t._v("Fast forward")]),t._v(" "),a("code",[t._v('git merge --no-ff -m "merge with no-ff" dev')]),t._v("\n因为本次合并要创建一个新的 "),a("code",[t._v("commit")]),t._v("，所以加上"),a("code",[t._v("-m")]),t._v(" 参数，把 "),a("code",[t._v("commit")]),t._v(" 描述写进去\n"),a("strong",[t._v("查看本地分支")]),t._v("："),a("code",[t._v("git branch")]),t._v(" "),a("strong",[t._v("查看远程分支")]),t._v("："),a("code",[t._v("git branch -r")]),t._v(" "),a("strong",[t._v("查看所有分支")]),t._v("（本地+远程）："),a("code",[t._v("git branch -a")]),t._v("\n带*的分支为当前工作的分支`\n"),a("strong",[t._v("删除本地分支")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d branchnamne\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//or")]),t._v("\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" branchname 强制删除\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("删除远程分支")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Git push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("branchname")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("删除远端分支 branchname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nGit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cbranhname")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("直接删除远端分支 branchname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("获取远程仓库的分支（本地没有的分支）\n"),a("code",[t._v("git pull origin $branch:$branch")]),t._v("\n实例："),a("code",[t._v("git pull origin branchname:branchname")])]),t._v(" "),a("h2",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),a("p",[a("code",[t._v("git commit -m ''")]),t._v(" 只会提交已经 "),a("code",[t._v("git add")]),t._v(" 过的文件（包括新增、修改、删除等所有修改操作）\n"),a("code",[t._v("git commit -a -m ''")]),t._v(" 会提交除新增未 "),a("code",[t._v("add")]),t._v(" 的文件之外的所有修改操作")]),t._v(" "),a("h2",{attrs:{id:"git-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),a("p",[a("code",[t._v("Git diff filename")]),t._v(" 显示本地文件修改的内容同版本库的差别\n"),a("code",[t._v("Git diff branchone branchtwo")]),t._v(" 对比两个 "),a("code",[t._v("branch")]),t._v(" 不同之处\n"),a("code",[t._v("Git diff tagone tagtwo")]),t._v(" 对比两个 "),a("code",[t._v("tag")]),t._v("不同之处")]),t._v(" "),a("h2",{attrs:{id:"删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),a("p",[t._v("在本地直接删除文件")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("rm file")]),t._v("（工作区中文件删除）")]),t._v(" "),a("li",[a("code",[t._v("git add file")]),t._v(" （文件删除的状态添加到暂存区中）")]),t._v(" "),a("li",[a("code",[t._v("git commit")]),t._v(" （提交文件删除的状态到本地的版本库中）\n以上三步可以缩减为两步：")]),t._v(" "),a("li",[a("code",[t._v("git rm file")]),t._v(" （直接把删除的文件添加到暂存区中）")]),t._v(" "),a("li",[a("code",[t._v("git commit")]),t._v(" （提交文件删除的状态到本地的版本库中）")])]),t._v(" "),a("h2",{attrs:{id:"删除文件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除文件-2"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git rm filename")]),t._v(" 然后 "),a("code",[t._v("git commit")]),t._v(" 即可")]),t._v(" "),a("li",[a("code",[t._v("rm filename")]),t._v(" / "),a("code",[t._v("git add")]),t._v(" / "),a("code",[t._v("git commit")])]),t._v(" "),a("li",[a("code",[t._v("git rm filename")]),t._v(" 就是 "),a("code",[t._v("rm filename")]),t._v(" 的简化版")])]),t._v(" "),a("h2",{attrs:{id:"查看当前工作区修改状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前工作区修改状态"}},[t._v("#")]),t._v(" 查看当前工作区修改状态")]),t._v(" "),a("p",[a("strong",[t._v("git status;")]),t._v("\n要随时掌握工作区的状态，\n使用 "),a("code",[t._v("git status")]),t._v(" 命令\n如果 "),a("code",[t._v("git status")]),t._v(" 告诉你有文件被修改过，")]),t._v(" "),a("p",[a("strong",[t._v("用 git diff 可以查看修改内容。")]),t._v(" "),a("code",[t._v("git diff")]),t._v(" 默认查看所有被修改过的文件（不包括新增未 "),a("code",[t._v("add")]),t._v(" 的文件）\n"),a("code",[t._v("git diff filename")]),t._v(" (查看具体某个文件的修改内容 )")]),t._v(" "),a("h2",{attrs:{id:"查看-log-记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看-log-记录"}},[t._v("#")]),t._v(" 查看 log 记录")]),t._v(" "),a("p",[a("code",[t._v("git log")]),t._v(" 默认列出之前提交过记录（根据提交时间由近到远排列）\n"),a("code",[t._v("git log -n")]),t._v(" 列出指定提交次数的记录\n"),a("code",[t._v("git log --pretty=oneline")]),t._v(" 列出简单记录信息（"),a("code",[t._v("commitid")]),t._v(" 和 提交注释）")]),t._v(" "),a("p",[a("code",[t._v("git reflog -n")]),t._v(" 查看指定次数的提交操作的记录信息（"),a("code",[t._v("commitid")]),t._v("）")]),t._v(" "),a("p",[a("strong",[t._v("log and reflog")]),t._v("\n两者都是查看所有的 "),a("code",[t._v("commit")]),t._v(" 操作的记录，"),a("code",[t._v("log")]),t._v(" 查看不到 "),a("code",[t._v("reset")]),t._v(" 回退时跳过的 "),a("code",[t._v("commit")]),t._v(" 操作的 "),a("code",[t._v("commitid")]),t._v("\n（可以夸版本回退一次，进行实际演示）")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git log\ngit reflog\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard commitid\ngit log\ngit reflog\n\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("graph 可以查看分支合并图\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"撤回和回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤回和回滚"}},[t._v("#")]),t._v(" 撤回和回滚")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在工作区内修改了文件但没有提交到暂存区撤销所有修改：\n"),a("code",[t._v("git checkout -- file.name")]),t._v(" 可以丢弃工作区的修改 ，只针对已跟踪的文件\n"),a("code",[t._v("git checkout -- file")]),t._v(" 命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令")])]),t._v(" "),a("li",[a("p",[t._v("文件已经添加到暂存区撤回：")])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("   git reset "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" file\n   or\n   git rm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cached filename\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("文件已经提交到了本地的版本库且未推向远端的版本库中：")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("   git reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//or")]),t._v("\n   git reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("推荐"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("HEAD 表示提交的最新版本。HEAD^表示上一个版本，HEAD^^表示上上个版本。HEAD~100 表示往上 100 个版本。\n(上两个版本 HEAD~2) 4. 文件已经从本地仓库推倒远程仓库的回退")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git log or git reflog 找到目标版本\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard commiid\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f origin "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("master")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f 参数是强制覆盖的意思，没有该参数会推送失败，因为远程仓库的版本高于当前版本"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("git revert commitid")]),t._v(" "),a("p",[t._v("git revert 是生成一个新的提交来撤销某次提交，此次提交之前的 commit 都会被保留\ngit reset 是回到某次提交，提交及之前的 commit 都会被保留，但是此次之后的修改都会被退回到暂存区")]),t._v(" "),a("p",[t._v("团队开发时，版本回退一定要通知其他人员！如果其他同事在每次提交前没有先更细后提交的意识或习惯的话，回退是白费功夫。")]),t._v(" "),a("p",[t._v("http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html")]),t._v(" "),a("h2",{attrs:{id:"状态冻结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态冻结"}},[t._v("#")]),t._v(" 状态冻结")]),t._v(" "),a("p",[a("code",[t._v("git stash")]),t._v(" 冻结当前修改状态")]),t._v(" "),a("p",[a("code",[t._v("git stash list")]),t._v(" 列出冻结列表")]),t._v(" "),a("p",[a("code",[t._v("git stash pop")]),t._v(" 可以按版本恢复某个冻结状态并删除")]),t._v(" "),a("p",[a("code",[t._v("git stash apply")]),t._v(" 只是按某个版本恢复某个冻结状态不删除")]),t._v(" "),a("p",[a("code",[t._v("git stash drop")]),t._v(" 删除指定某个冻结状态")]),t._v(" "),a("h2",{attrs:{id:"tag-管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag-管理"}},[t._v("#")]),t._v(" tag 管理")]),t._v(" "),a("p",[t._v("创建 "),a("code",[t._v("tag")]),t._v(":")]),t._v(" "),a("p",[a("code",[t._v("git tag -a tagname -m")]),t._v(" “添加 "),a("code",[t._v("tag")]),t._v(" 的描述信息” ("),a("code",[t._v("tag")]),t._v(" 要有个规则标识例如："),a("code",[t._v("feature_abc_v1.1")]),t._v(" ，给当前分支打一个 "),a("code",[t._v("tag")]),t._v(" 名为 "),a("code",[t._v("tagname")]),t._v(")")]),t._v(" "),a("p",[t._v("命令 "),a("code",[t._v("git tag <name>")]),t._v("用于新建一个标签，默认为 "),a("code",[t._v("HEAD")]),t._v("，也可以指定一个 "),a("code",[t._v("commit id")]),t._v("；")]),t._v(" "),a("p",[t._v("提交创建的 "),a("code",[t._v("tag")]),t._v(":")]),t._v(" "),a("p",[a("code",[t._v("git push origin tagname")]),t._v(" (同提交分支操作一样)")]),t._v(" "),a("p",[t._v("命令 "),a("code",[t._v("git tag")]),t._v(" 可以查看所有标签。\n查看 "),a("code",[t._v("tag")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git tag\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//or")]),t._v("\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("l\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("查看标签的具体信息：")]),t._v(" "),a("p",[a("code",[t._v("git show tag-name")])]),t._v(" "),a("p",[t._v("删除标签：")]),t._v(" "),a("p",[a("code",[t._v("Git tag -d tagname")]),t._v(" (本地删除)")]),t._v(" "),a("p",[a("code",[t._v("Git push orign (空格):refs/tags/tagname")]),t._v(" (把删除的 "),a("code",[t._v("tag")]),t._v(" 提交到远端)")]),t._v(" "),a("p",[t._v("删除标签实例：")]),t._v(" "),a("p",[a("code",[t._v("git tag -d v0.9")])]),t._v(" "),a("p",[a("code",[t._v("git push origin :refs/tags/v0.9")])]),t._v(" "),a("p",[t._v("获取远程仓库的 "),a("code",[t._v("tag")]),t._v(" 信息（本地没有）")]),t._v(" "),a("p",[a("code",[t._v("git fetch origin tag $tag")])]),t._v(" "),a("h2",{attrs:{id:"同远程仓库关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同远程仓库关联"}},[t._v("#")]),t._v(" 同远程仓库关联")]),t._v(" "),a("p",[t._v("查看当前代码关联的远程仓库信息")]),t._v(" "),a("p",[a("code",[t._v("git remote")]),t._v(" 直接回车，列出所有关联的远程仓库")]),t._v(" "),a("p",[a("code",[t._v("git remote -v")]),t._v(" 回车 列出每个远程仓库名及对应的仓库地址 "),a("code",[t._v("url")])]),t._v(" "),a("p",[a("code",[t._v("git remote add [shortname] [url]")]),t._v(": 添加同一个远程仓库的关联关系")]),t._v(" "),a("p",[a("code",[t._v("git remote remove shortname")]),t._v(" : 删除同一个远程仓库的关联关系")]),t._v(" "),a("p",[t._v("要关联一个远程库，使用命令 "),a("code",[t._v("git remote add origin git@server-name:path/repo-name.git；")])]),t._v(" "),a("p",[t._v("关联后，使用命令 "),a("code",[t._v("git push -u origin master")]),t._v(" 第一次推送 "),a("code",[t._v("master")]),t._v(" 分支的所有内容；")]),t._v(" "),a("p",[t._v("此后，每次本地提交后，只要有必要，就可以使用命令 "),a("code",[t._v("git push origin master")]),t._v(" 推送最新修改；")]),t._v(" "),a("p",[t._v("分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的！\n当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！")]),t._v(" "),a("h2",{attrs:{id:"gitignore-规则不生效的解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-规则不生效的解决办法"}},[t._v("#")]),t._v(" .gitignore 规则不生效的解决办法")]),t._v(" "),a("p",[t._v("把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore 只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改"),a("code",[t._v(".gitignore")]),t._v(" 是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git rm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cached "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update .gitignore'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("克隆：\n"),a("code",[t._v("HTTPS")]),t._v("：通过 "),a("code",[t._v("http")]),t._v(" 协议下载，需要输入账号密码\n"),a("code",[t._v("SSH")]),t._v("：直接克隆，需要公钥放到 "),a("code",[t._v("gitee")]),t._v(" 仓库中")]),t._v(" "),a("p",[a("code",[t._v("git config --list")]),t._v(" 查看 "),a("code",[t._v("git")]),t._v(" 配置项，可以查看自己的登录的用户名和邮箱\n按 "),a("code",[t._v("Q")]),t._v(" 退出")]),t._v(" "),a("p",[t._v("touch <文件名> 创建一个文件")]),t._v(" "),a("p",[t._v("rm -rf ./<文件名> 删除文件")]),t._v(" "),a("p",[t._v("ls 查看所有文件和文件夹")]),t._v(" "),a("p",[t._v("ls -al 查看所有文件和隐藏的文件")]),t._v(" "),a("p",[t._v("r 可读 ；w 可写； x 可执行 加起来是 7")]),t._v(" "),a("p",[a("code",[t._v("echo")]),t._v(" '打印内容' 打印")]),t._v(" "),a("p",[a("code",[t._v("echo '' > index.js")]),t._v(" 覆盖 "),a("code",[t._v("index")]),t._v(" 中的内容 >> 代表追加")]),t._v(" "),a("p",[a("code",[t._v("cat index.js")]),t._v(" 查看 "),a("code",[t._v("index")]),t._v(" 内容")]),t._v(" "),a("p",[a("code",[t._v("git cz")]),t._v(" 查询 "),a("code",[t._v("commit")]),t._v(" 时的提交关键字")]),t._v(" "),a("p",[t._v("当报错没有上游分支时，使用："),a("code",[t._v("git push --set-upstream origin <master>")]),t._v(" 来设置上游分支")]),t._v(" "),a("p",[a("code",[t._v("git merage")]),t._v(" 合并分支")]),t._v(" "),a("p",[t._v("要想将 "),a("code",[t._v("dev")]),t._v(" 合并到 "),a("code",[t._v("master")]),t._v("，先切换到 "),a("code",[t._v("master")]),t._v(" 分支，使用 "),a("code",[t._v("git merage dev")])])])}),[],!1,null,null,null);a.default=v.exports}}]);